{"version":3,"file":"SideNav.stories-5fcf3294.js","sources":["../../src/components/layout/SideBar/SideNav/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Typography } from 'components/ui';\n\nimport classNames from 'classnames';\nimport './index.scss';\n\nexport type NavItemProps = {\n  label: string;\n  itemId: string;\n  iconName?: string;\n  subNav?: NavItemProps[];\n};\n\nexport type SideNavProps = {\n  isExpanded?: boolean;\n  items: NavItemProps[];\n  activeItemId: string;\n  onSelect?: ({ itemId }: { itemId: string }) => void;\n};\n\nconst SideNav = ({ isExpanded, activeItemId, onSelect, items }: SideNavProps) => {\n  const [activeSubNav, setActiveSubNav] = useState({\n    expanded: true,\n    selectedId: activeItemId\n  });\n\n  useEffect(() => {\n    setActiveSubNav((originalSubNav) => ({\n      expanded: originalSubNav.expanded,\n      selectedId: activeItemId\n    }));\n  }, [activeItemId]);\n\n  const handleClick = (itemId: string): void => {\n    // call the callback if supplied\n    onSelect?.({ itemId });\n  };\n\n  const handleSubNavExpand = (item: NavItemProps): void => {\n    if (activeSubNav.expanded) {\n      const currentItemOrSubNavItemIsOpen: boolean =\n        // either the parent item is expanded already\n        item.itemId === activeSubNav.selectedId ||\n        // or one of its expandable children is selected\n        (item.subNav &&\n          item.subNav.some((_subNavItem) => _subNavItem.itemId === activeSubNav.selectedId)) ||\n        false;\n\n      setActiveSubNav({\n        expanded: item.subNav && item.subNav.length > 0 ? !currentItemOrSubNavItemIsOpen : false, // disable expansion value, if not expandable\n        selectedId: item.itemId\n      });\n    } else {\n      setActiveSubNav({\n        expanded: !!(item.subNav && item.subNav.length > 0), // expand if expandable\n        selectedId: item.itemId\n      });\n    }\n  };\n\n  return (\n    <>\n      {items.length > 0 && (\n        <nav role=\"navigation\" aria-label=\"side-navigation\" className=\"side-nav\">\n          <ul className=\"side-nav__list\">\n            {items.map((item: NavItemProps) => {\n              const ElemBefore = item.iconName;\n              const isItemSelected: boolean = item.itemId === activeSubNav.selectedId;\n              const isActiveTab: boolean =\n                // item is expanded and\n                activeSubNav.expanded &&\n                // either the current expandable section is selected\n                (isItemSelected ||\n                  // or some item in the expandable section of the current item is selected or active\n                  (item.subNav &&\n                    item.subNav.some(\n                      (_subNavItem: NavItemProps) => _subNavItem.itemId === activeSubNav.selectedId\n                    )) ||\n                  false);\n\n              return (\n                <>\n                  <li\n                    key={item.itemId}\n                    className={classNames('side-nav__item', {\n                      'side-nav__item--active': isItemSelected\n                    })}\n                  >\n                    <button\n                      type=\"button\"\n                      onClick={(): void => {\n                        handleSubNavExpand(item);\n                        handleClick(item.itemId);\n                      }}\n                      className={classNames('side-nav__item-touch-area', {\n                        'side-nav__item-touch-area--expanded': isExpanded\n                      })}\n                    >\n                      {/** Prefix Icon Component */}\n                      {ElemBefore && (\n                        <img\n                          src={`/assets/icons/ico-${item.iconName}.svg`}\n                          alt={`${item.iconName} icon`}\n                          className=\"side-nav__item-icon\"\n                        />\n                      )}\n\n                      {isExpanded && (\n                        <Typography variant=\"head\" className=\"side-nav__item-label\">\n                          {item.label}\n                        </Typography>\n                      )}\n                    </button>\n                  </li>\n\n                  {item.subNav && item.subNav.length > 0 && isActiveTab && (\n                    <ul className=\"side-nav__inner-list\">\n                      {item.subNav.map((subNavItem: NavItemProps) => {\n                        const SubItemElemBefore = subNavItem.iconName;\n\n                        return (\n                          <li key={subNavItem.itemId} className=\"side-nav__inner-item\">\n                            <button\n                              type=\"button\"\n                              onClick={(): void => {\n                                setActiveSubNav({\n                                  ...activeSubNav,\n                                  selectedId: subNavItem.itemId\n                                });\n                                handleClick(subNavItem.itemId);\n                              }}\n                              className={classNames('side-nav__inner-item-touch-area', {\n                                'side-nav__item--active':\n                                  activeSubNav.selectedId === subNavItem.itemId\n                              })}\n                            >\n                              {/** Prefix Icon Component */}\n                              {SubItemElemBefore && (\n                                <img\n                                  src={`/assets/icons/ico-${item.iconName}.svg`}\n                                  alt={`${item.iconName} icon`}\n                                  className=\"side-nav__inner-item-icon\"\n                                />\n                              )}\n\n                              <Typography\n                                variant=\"head\"\n                                className={classNames('side-nav__inner-item-label', {\n                                  'side-nav__inner-item-label--active':\n                                    activeSubNav.selectedId === subNavItem.itemId\n                                })}\n                              >\n                                {subNavItem.label}\n                              </Typography>\n                            </button>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  )}\n                </>\n              );\n            })}\n          </ul>\n        </nav>\n      )}\n    </>\n  );\n};\n\nexport default SideNav;\n"],"names":["SideNav","isExpanded","activeItemId","onSelect","items","activeSubNav","setActiveSubNav","useState","useEffect","originalSubNav","handleClick","itemId","handleSubNavExpand","item","currentItemOrSubNavItemIsOpen","_subNavItem","jsx","Fragment","ElemBefore","isItemSelected","isActiveTab","jsxs","classNames","Typography","subNavItem","SubItemElemBefore","SideNav$1"],"mappings":"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"}