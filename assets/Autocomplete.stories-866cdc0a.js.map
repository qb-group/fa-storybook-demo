{"version":3,"file":"Autocomplete.stories-866cdc0a.js","sources":["../../src/components/forms/Autocomplete/index.tsx"],"sourcesContent":["import {\n  ChangeEvent,\n  KeyboardEvent,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  useState\n} from 'react';\nimport useClickOutside from 'hooks/useClickOutside';\n\nimport Label from 'components/forms/Label';\nimport Typography from 'components/ui/Typography';\nimport { Icon } from 'components/ui';\n\nimport classNames from 'classnames';\n\nexport type Options = {\n  id: string | number;\n  label: string;\n};\n\nexport interface AutocompleteProps {\n  label?: ReactNode;\n  required?: boolean;\n  options: Options[];\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}\n\nconst Autocomplete = ({\n  label,\n  required,\n  options,\n  defaultValue = '',\n  onChange\n}: AutocompleteProps) => {\n  const id = useId();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const optionsRef = useRef<HTMLButtonElement | null>(null);\n  let loading;\n\n  const [showListBox, setShowListBox] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [filteredOptions, setFilteredOptions] = useState<Options[]>(options);\n  const [selectedOption, setSelectedOption] = useState<Options | null>(null);\n  const [selectedIndex, setSelectedIndex] = useState<number>(-1);\n\n  const [selectedLabel, setSelectedLabel] = useState<Options['label'] | undefined>(defaultValue);\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const newInputValue = event.target.value;\n      setInputValue(newInputValue);\n\n      const filtered = options.filter((option) =>\n        option.label.toLowerCase().includes(newInputValue.toLowerCase())\n      );\n      setFilteredOptions(filtered);\n\n      if (selectedOption?.label === inputValue) {\n        setShowListBox(false);\n      }\n\n      setShowListBox(true);\n\n      if (onChange) {\n        onChange(newInputValue);\n      }\n    },\n    [inputValue, options, selectedOption, onChange]\n  );\n\n  const handleOptionSelect = useCallback(({ id, label }: Options) => {\n    setSelectedOption({ id, label });\n    setSelectedLabel(label);\n    setShowListBox(false);\n  }, []);\n\n  const handleKeyboardEvent = useCallback(\n    (e: KeyboardEvent<HTMLElement>) => {\n      switch (e.key) {\n        case 'Tab': {\n          setShowListBox(false);\n          break;\n        }\n        case 'ArrowDown': {\n          e.preventDefault();\n          const newIndex = selectedIndex < options.length - 1 ? selectedIndex + 1 : 0;\n          setSelectedIndex(newIndex);\n          break;\n        }\n        case 'ArrowUp': {\n          e.preventDefault();\n          const newIndex = selectedIndex > 0 ? selectedIndex - 1 : options.length - 1;\n          setSelectedIndex(newIndex);\n          break;\n        }\n        case 'Enter': {\n          e.preventDefault();\n          const selectedItem = options.find((_, index) => index === selectedIndex);\n          if (selectedItem) {\n            handleOptionSelect(selectedItem);\n          }\n          break;\n        }\n        case 'Escape': {\n          e.preventDefault();\n          setInputValue('');\n          setSelectedIndex(-1);\n          setShowListBox(false);\n          break;\n        }\n        default:\n          null;\n      }\n    },\n    [handleOptionSelect, options, selectedIndex]\n  );\n\n  const listRef = useClickOutside(() => {\n    if (inputRef.current && !inputRef.current.contains(event?.target as Node)) {\n      setShowListBox(false);\n    }\n  });\n\n  useEffect(() => {\n    setInputValue(defaultValue);\n  }, [defaultValue]);\n\n  useEffect(() => {\n    console.log('selectedOption changed:', selectedOption);\n    if (selectedOption) {\n      setInputValue(selectedOption.label);\n      setShowListBox(false);\n    }\n  }, [selectedOption]);\n\n  return (\n    <div className=\"flex flex-col relative w-full\">\n      <div className=\"flex flex-col relative gap-2\">\n        {label && <Label text={label} required={required} />}\n        <div className=\"flex items-center relative min-h-[3rem] py-3 pr-4 pl-11\">\n          {/* TODO: 아이콘에 이벤트 필요 없으면 삭제할 거예요 */}\n          <button\n            type=\"button\"\n            onClick={() => {\n              const filtered = options.filter((option) =>\n                option.label.toLowerCase().includes(inputValue.toLowerCase())\n              );\n\n              setFilteredOptions(filtered);\n              setShowListBox(true);\n            }}\n            className=\"inline-flex items-center justify-center shrink-0 absolute left-4 z-[9]\"\n          >\n            <Icon name=\"icon-basic-search\" size=\"text-24\" color=\"text-gray-500\" />\n          </button>\n          <input\n            ref={inputRef}\n            type=\"text\"\n            id={id}\n            placeholder=\"검색하세요\"\n            className=\"flex absolute inset-0 py-3 pr-4 pl-11 bg-white rounded-form-md border border-gray-300 text-body-base font-500 text-gray-700 placeholder:text-gray-600 outline-none focus-visible--outline\"\n            value={inputValue}\n            autoComplete=\"off\"\n            onFocus={() => setShowListBox(true)}\n            onChange={handleInputChange}\n            onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\n              if (e.key === 'ArrowDown') {\n                setShowListBox(true);\n              }\n            }}\n            onKeyDown={(e: KeyboardEvent<HTMLInputElement>) => {\n              handleKeyboardEvent(e);\n            }}\n          />\n          {inputValue !== '' && (\n            <button\n              type=\"button\"\n              className=\"inline-flex items-center justify-center shrink-0 absolute right-4 z-[9]\"\n              onClick={() => {\n                setInputValue('');\n              }}\n            >\n              <Icon\n                name=\"icon-check-hlep-fill-1\"\n                size=\"text-24\"\n                color=\"text-gray-700 hover:text-gray-600\"\n              />\n            </button>\n          )}\n        </div>\n      </div>\n      {/* 검색 필터 리스트 */}\n      {showListBox && (\n        <div\n          ref={listRef}\n          className=\"flex flex-col absolute top-full z-[99] w-full -mt-[0.375rem] py-2 bg-white rounded-card-xs border border-gray-400 shadow-elevation-5\"\n        >\n          {loading && <Typography>loading...</Typography>}\n          {filteredOptions.length <= 0 ? (\n            <div className=\"flex items-center py-2 px-5\">\n              <Typography color=\"text-gray-700\">등록되지 않은 학교에요</Typography>\n            </div>\n          ) : (\n            filteredOptions.map(({ id, label }, index) => (\n              <button\n                ref={(ref) => {\n                  if (inputRef.current && inputRef.current !== document.activeElement) {\n                    if ((selectedIndex && index === selectedIndex) || index === 0) {\n                      setSelectedIndex((!selectedIndex && index) || selectedIndex);\n                      optionsRef.current = ref;\n                    }\n                  }\n                }}\n                key={id}\n                type=\"button\"\n                onClick={() => handleOptionSelect({ id, label })}\n                className={classNames(\n                  'flex items-center w-full py-2 px-5 hover:bg-gray-200 outline-none',\n                  {\n                    'bg-gray-200': label === selectedLabel\n                  },\n                  {\n                    'outline outline-2 -outline-offset-2 outline-primary-600':\n                      selectedIndex === index\n                  }\n                )}\n              >\n                <Typography\n                  weight={label === selectedLabel ? 700 : 400}\n                  color={label === selectedLabel ? 'text-primary-500' : 'text-gray-800'}\n                >\n                  {label}\n                </Typography>\n              </button>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n"],"names":["Autocomplete","label","required","options","defaultValue","onChange","id","useId","inputRef","useRef","optionsRef","loading","showListBox","setShowListBox","useState","inputValue","setInputValue","filteredOptions","setFilteredOptions","selectedOption","setSelectedOption","selectedIndex","setSelectedIndex","selectedLabel","setSelectedLabel","handleInputChange","useCallback","event2","newInputValue","filtered","option","handleOptionSelect","id2","label2","handleKeyboardEvent","e","newIndex","selectedItem","_","index","listRef","useClickOutside","useEffect","jsxs","jsx","Label","Icon","Typography","ref","classNames","Autocomplete$1"],"mappings":"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"}