{"version":3,"file":"index-62ab68bf.js","sources":["../../src/components/forms/Textarea/index.tsx","../../src/components/forms/Checkbox/index.tsx","../../src/components/forms/Toggle/index.tsx"],"sourcesContent":["import './index.scss';\n\nimport classNames from 'classnames';\nimport ErrorMessage from 'components/forms/ErrorMessage';\nimport Label from 'components/forms/Label';\nimport Icon from 'components/ui/Icon';\nimport _get from 'lodash/get';\nimport { FocusEventHandler, FormEventHandler, memo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\nexport type TextareaProps = {\n  name: string;\n  placeholder: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  label?: string;\n  value?: string | number;\n  defaultValue?: string | number;\n  defaultHeight?: number;\n  required?: boolean;\n  flexDirection?: 'row' | 'column';\n  variant?: 'bordered' | 'ghost';\n  size?: 'lg' | 'md' | 'sm' | 'xs';\n  align?: 'left' | 'center' | 'right';\n  color?: 'primary' | 'secondary';\n  clearable?: boolean;\n  autoComplete?: 'on' | 'off';\n};\n\nconst COLOR_MAPS = {\n  primary: 'qb-textarea--primary',\n  secondary: 'qb-textarea--secondary'\n};\n\nconst VARIANT_MAPS = {\n  bordered: 'qb-textarea--bordered',\n  ghost: 'qb-textarea--ghost'\n};\n\nconst SIZE_MAPS = {\n  lg: 'qb-textarea--lg',\n  md: 'qb-textarea--md',\n  sm: 'qb-textarea--sm',\n  xs: 'qb-textarea--xs'\n};\n\nconst ALIGN_MAPS = {\n  left: 'qb-textarea--left',\n  center: 'qb-textarea--center',\n  right: 'qb-textarea--right'\n};\n\nconst Textarea = ({\n  name,\n  placeholder,\n  disabled = false,\n  readOnly = false,\n  label,\n  defaultValue,\n  defaultHeight,\n  required = false,\n  flexDirection = 'column',\n  variant = 'bordered',\n  size = 'md',\n  align = 'left',\n  color = 'primary',\n  clearable = false,\n  autoComplete = 'off',\n  ...props\n}: TextareaProps) => {\n  const { control, reset, formState } = useFormContext();\n\n  const errorMessage = _get(formState?.errors, `${name}.message`, '') as string;\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      defaultValue={defaultValue}\n      render={({ field: { ref, ...fieldRest } }) => {\n        const handleResizeHeight: FormEventHandler<HTMLTextAreaElement> = (e) => {\n          const element = e.target as HTMLTextAreaElement;\n          element.style.height = 'auto';\n          element.style.height = `${element.scrollHeight}px`;\n        };\n\n        const onFocus: FocusEventHandler<HTMLTextAreaElement> = (e) => {\n          const { target } = e;\n          setTimeout(() => {\n            target.style.height = `${target.scrollHeight}px`;\n          }, 0);\n        };\n\n        return (\n          <div\n            className={classNames(\n              'qb-textarea',\n              {\n                'qb-textarea--row': flexDirection === 'row'\n              },\n              {\n                'qb-textarea--disabled': disabled\n              },\n              {\n                'qb-textarea--readonly': readOnly\n              },\n              {\n                'qb-textarea--clearable': clearable\n              },\n              VARIANT_MAPS[variant],\n              SIZE_MAPS[size],\n              ALIGN_MAPS[align],\n              COLOR_MAPS[color]\n            )}\n          >\n            {label && <Label text={label} required={required} color={color} />}\n            <div className=\"qb-textarea__outside\">\n              <div className=\"qb-textarea__actions\">\n                <textarea\n                  className=\"qb-textarea__form\"\n                  style={{\n                    height: defaultHeight\n                  }}\n                  rows={1}\n                  onInput={handleResizeHeight}\n                  onFocus={onFocus}\n                  ref={ref}\n                  placeholder={placeholder}\n                  disabled={disabled}\n                  readOnly={readOnly}\n                  autoComplete={autoComplete}\n                  {...fieldRest}\n                  value={fieldRest.value || ''}\n                />\n                {clearable && fieldRest.value !== '' && !disabled && !readOnly && (\n                  <button\n                    type=\"button\"\n                    className=\"qb-textarea__clearable\"\n                    onClick={() => {\n                      reset({\n                        [name]: ''\n                      });\n                    }}\n                  >\n                    <Icon\n                      name=\"icon-basic-close\"\n                      size=\"text-20\"\n                      color=\"text-gray-600 hover:text-gray-700\"\n                    />\n                  </button>\n                )}\n              </div>\n            </div>\n            {errorMessage && <ErrorMessage text={errorMessage} />}\n          </div>\n        );\n      }}\n      {...props}\n    />\n  );\n};\n\nconst MemoizedTextarea = memo(Textarea);\nexport default MemoizedTextarea;\n","import './index.scss';\n\nimport classNames from 'classnames';\nimport Icon from 'components/ui/Icon';\nimport { InputHTMLAttributes, memo, useId } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\n/**\n * hasContext - form 사용 여부\n */\nexport type CheckboxProps = {\n  name: string;\n  label?: string;\n  size?: 'lg' | 'md' | 'sm' | 'xs';\n  color?: 'primary' | 'secondary';\n  reverse?: boolean;\n  hasContext?: boolean;\n} & Omit<InputHTMLAttributes<HTMLInputElement>, 'size'>;\n\nconst SIZE_MAPS = {\n  lg: 'qb-checkbox--lg',\n  md: 'qb-checkbox--md',\n  sm: 'qb-checkbox--sm',\n  xs: 'qb-checkbox--xs'\n};\n\nconst COLOR_MAPS = {\n  primary: 'qb-checkbox--primary',\n  secondary: 'qb-checkbox--secondary'\n};\n\nexport const ContextCheckbox = ({\n  name,\n  id,\n  size = 'md',\n  color = 'primary',\n  disabled,\n  reverse,\n  label,\n  defaultChecked\n}: CheckboxProps) => {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field: { ref, ...fieldRest } }) => {\n        return (\n          <div\n            className={classNames(\n              'qb-checkbox',\n              SIZE_MAPS[size],\n              COLOR_MAPS[color],\n              {\n                'qb-checkbox--disabled': disabled\n              },\n              {\n                'qb-checkbox--reverse': reverse\n              }\n            )}\n          >\n            <input\n              type=\"checkbox\"\n              id={id}\n              className=\"qb-checkbox__form focus-visible--all\"\n              ref={ref}\n              disabled={disabled}\n              defaultChecked={defaultChecked}\n              {...fieldRest}\n            />\n            <Icon name=\"icon-check-check2\" className=\"qb-checkbox__icon\" />\n            {label && (\n              <label htmlFor={id} className=\"qb-checkbox__label\">\n                {label}\n              </label>\n            )}\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nconst Checkbox = ({\n  name,\n  label,\n  size = 'md',\n  color = 'primary',\n  reverse = false,\n  hasContext = false,\n  disabled,\n  defaultChecked = false,\n  ...props\n}: CheckboxProps) => {\n  const id = useId();\n\n  return (\n    <>\n      {hasContext ? (\n        <ContextCheckbox\n          name={name}\n          id={id}\n          size={size}\n          color={color}\n          reverse={reverse}\n          label={label}\n          defaultChecked={defaultChecked}\n        />\n      ) : (\n        <div\n          className={classNames(\n            'qb-checkbox',\n            SIZE_MAPS[size],\n            COLOR_MAPS[color],\n            {\n              'qb-checkbox--disabled': disabled\n            },\n            {\n              'qb-checkbox--reverse': reverse\n            }\n          )}\n        >\n          <input\n            type=\"checkbox\"\n            name={name}\n            id={id}\n            disabled={disabled}\n            className=\"qb-checkbox__form focus-visible--all\"\n            {...props}\n          />\n          <Icon name=\"icon-check-check2\" className=\"qb-checkbox__icon\" />\n          {label && (\n            <label htmlFor={id} className=\"qb-checkbox__label\">\n              {label}\n            </label>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst MemoizedCheckbox = memo(Checkbox);\nexport default MemoizedCheckbox;\n","import './index.scss';\n\nimport Label from 'components/forms/Label';\nimport { HTMLAttributes, useId } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\nexport type ToggleProps = {\n  name: string;\n  value?: string | number;\n  isToggled?: boolean;\n  onToggle?: () => void;\n  label?: string;\n  required?: boolean;\n  hasContext?: boolean;\n  options: { value: string | number; label: string }[];\n} & HTMLAttributes<HTMLInputElement>;\n\nexport const ContextToggle = ({ name, id, label, required, options }: ToggleProps) => {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ field: { value, onChange } }) => (\n        <div className=\"qb-switch\">\n          {label && <Label text={label} required={required} />}\n          <input\n            name=\"name\"\n            id={id}\n            type=\"checkbox\"\n            checked={value === options[1].value}\n            onChange={(e) => {\n              const newValue = e.target.checked ? options[1].value : options[0].value;\n              onChange(newValue);\n            }}\n            className=\"qb-switch__form\"\n          />\n          <label className=\"qb-switch__actions\" htmlFor={id}>\n            <span className=\"qb-switch__label qb-switch__label--left\">{options?.[0].label}</span>\n            <span className=\"qb-switch__label qb-switch__label--right\">{options?.[1].label}</span>\n          </label>\n        </div>\n      )}\n    />\n  );\n};\n\nconst Toggle = ({\n  name,\n  isToggled,\n  onToggle,\n  label,\n  required,\n  options,\n  hasContext = false\n}: ToggleProps) => {\n  const id = useId();\n\n  return (\n    <>\n      {hasContext ? (\n        <ContextToggle name={name} id={id} label={label} required={required} options={options} />\n      ) : (\n        <div className=\"qb-switch\">\n          {label && <Label text={label} required={required} />}\n          <input\n            name=\"name\"\n            type=\"checkbox\"\n            id={id}\n            checked={isToggled}\n            onChange={onToggle}\n            className=\"qb-switch__form\"\n          />\n          <label className=\"qb-switch__actions\" htmlFor={id}>\n            <span className=\"qb-switch__label qb-switch__label--left\">{options?.[0].label}</span>\n            <span className=\"qb-switch__label qb-switch__label--right\">{options?.[1].label}</span>\n          </label>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Toggle;\n"],"names":["COLOR_MAPS","VARIANT_MAPS","SIZE_MAPS","ALIGN_MAPS","Textarea","name","placeholder","disabled","readOnly","label","defaultValue","defaultHeight","required","flexDirection","variant","size","align","color","clearable","autoComplete","props","control","reset","formState","useFormContext","errorMessage","_get","jsx","Controller","ref","fieldRest","handleResizeHeight","e","element","onFocus","target","jsxs","classNames","Label","Icon","ErrorMessage","MemoizedTextarea","memo","Textarea$1","ContextCheckbox","id","reverse","defaultChecked","Checkbox","hasContext","useId","Fragment","MemoizedCheckbox","Checkbox$1","ContextToggle","options","value","onChange","newValue","Toggle","isToggled","onToggle","Toggle$1"],"mappings":"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"}